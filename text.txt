> Представим, что у нас есть данные, которые мы очень часто читаем по сравнению с другими (например словарь стран). Как можно это оптимизировать?
Конкретный подход зависит от данных (какого они типа, размера, структурированы ли они). 
Общие идеи:
* Не мешать холодным данным (Например, вынести горячие данные на отдельные сервера, балансировщики)
* Минимизировать задержки (Например, кэширование на клиенте, RAM storage, SSD)
В случае с словарём стран наилучшим решением с точки зрения производительности было бы поставлять его вместе с сервисом (в одном Docker Image) или в виде sidecar (если требуется независимый deploy и минимальный размер сервиса приложения)
> Что можно сделать, если таблица вакансий стала слишком большой? Какие есть решения на уровне текущей базы данных? Можно ли ее чем то заменить?
Общие идеи:
* оптимизация индексов и структуры базы данных
* вертикальное масштабирование
* горизонтальное масштабирование (для PostgreSQL существует достаточно решений)
В случае с вакансиями имеет смысл разделять данные на архивные и актуальные. Это поможет увеличить производительность системы и снизит расходы на хранение данных (для актуальных данных можно использовать более производительные сервера и СХД). 
> Какие вы видите узкие места, возможно неправильно выбранные технологии в текущей схеме(можно рассмотреть как “нашу” схему, так и схему настоящего hh.ru)
Буду говорить о схеме hh
Объединение jlogic и logic
Плюсы: проще разворачивать, реализовывать новую функциональность (это предположение основано на том, что из схемы не ясно, как разделяется ответственность между сервисами), меньше внутреннего трафика (нет запросов между jlogic и logic), единая точка входа.
Минусы: это займёт много времени
